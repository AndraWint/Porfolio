# -*- coding: utf-8 -*-
"""Winters_porfolio1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xl6N_aqLKQjC3ygja_8Z_WT3hixpyAcC
"""

p1_first_name = input("Please enter your name:")
print(f"My name is {p1_first_name}.")
p1_start_date = input("Please enter start date:")
print(f"Is your start date{p1_start_date}?")
p1_orientation_start = input("What time did your orientation start?")
p1_orientation_end = input("What time did your orientation end?")
print(f"I started my orientation at {p1_orientation_start} and ended it at {p1_orientation_end}.")
p2_first_name = input("Please enter your name:")
p2_start_date = input("Please enter start date:")
p2_orientation_start = input("What time did your orientation start?")
p2_orientation_end = input("What time did your orientation end?")

print(p1_first_name)
print(p1_start_date)
print(p1_orientation_start)
print(p1_orientation_end)

print(p2_first_name)
print(p2_start_date)
print(p2_orientation_start)
print(p2_orientation_end)

from IPython.utils.encoding import DEFAULT_ENCODING
class Person_1:
  def __init__(self, first_name, last_name, avaliable_days, avaliable_times):
    self.first_name = first_name
    self.last_name = last_name
    self.avaliable_days = avaliable_days
    self.avaliable_times = avaliable_times

    def display(self):
      self(f"{first_name}, {last_name} is avaliable on:")
      for i, in enumerate (self.avaliable_days):
        pass



    def load_data():
        return first_name, last_name, avaliable_days, avaliable_times

from pickleshare import time
class Person:
    def __init__(self, first_name, last_name, avaliable_day, avaliable_times):
        self.first_name = first_name
        self.last_name = last_name
        self.avaliable_day = avaliable_day
        self.avaliable_times = avaliable_times

    def display(self):
        print(f"{self.first_name}, {self.last_name} is avaliable on {self.avaliable_day} at:")
        for time in self.avaliable_times:
            print(time)

    def add_new_time(self, new_time):
        self.avaliable_times.append(new_time)
        self.display()

p1 = Person("andra" , "winters", "monday", [10, 19])

p1.display()

p1.add_new_time(12)